apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'com.google.protobuf'

group = 'org.interledger'
version = java_ilp_ledger_api_version
description = "Interledger Java Reference Ledger API"

sourceCompatibility = 1.8
targetCompatibility = 1.8

// REF: https://github.com/grpc/grpc-java/blob/master/README.md

jar {
    manifest {
        attributes 'Implementation-Title': description,
                   'Implementation-Version': version
    }
}

repositories {
    mavenLocal()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "https://jitpack.io" }
}

dependencies {
    // REF: https://github.com/google/protobuf-gradle-plugin/blob/master/exampleProject/build.gradle
    protobuf files("./ILP_gRPC_API/ilp_protocol.proto")
    compile     project(':service-config-support')
    compile     project(':vertx-support')
    compile     project(':java-ilp-core')

    // gRPC dependencies {
    compile 'io.grpc:grpc-netty:1.0.1'
    compile 'io.grpc:grpc-protobuf:1.0.1'
    compile 'io.grpc:grpc-stub:1.0.1'
    // }
    testCompile "junit:junit:${junit_version}"
    testCompile "org.hamcrest:hamcrest-core:${hamcrest_core_version}"
}

buildscript {
  // REF: https://github.com/google/protobuf-gradle-plugin/blob/master/exampleProject/build.gradle
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
  }
}

protobuf {
  // REF: https://github.com/google/protobuf-gradle-plugin
  // generatedFilesBaseDir = "protoc_generated" KO. Doesn't looks to work
  protoc {
    artifact = "com.google.protobuf:protoc:3.1.0"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.1'
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

//Maven compatibility task:
task writePom << {
    pom {
        project {
            packaging 'jar'
            name project.name
            description project.description                        
            inceptionYear '2016'  
            properties {
                "project.build.sourceEncoding" "UTF-8"
                "maven.compiler.source" "1.8"
                "maven.compiler.target" "1.8"
                "checkstyle.config.location" "../google_checks.xml"
                "checkstyle.consoleOutput" "true"
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }  
            developers {
                developer {
                    id "mrmx"
                    name "Manuel Polo"
                    email "mistermx@gmail.com"                    
                    organizationUrl "http://www.everis.com"
                }
            }
            reporting  {
                plugins {
                    plugin {
                        groupId "org.apache.maven.plugins"
                        artifactId "maven-checkstyle-plugin"
                        version "2.17"
                    }
                }
            }
            
        }        
    }.writeTo("pom.xml")
}

eclipse {
    classpath {
        file {
            withXml {
                def node = it.asNode()
                node.appendNode('classpathentry', [kind: 'src', path: './build/generated/source/proto/main/grpc'])
                node.appendNode('classpathentry', [kind: 'src', path: './build/generated/source/proto/main/java'])
            }
        }
    }
}
